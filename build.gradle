apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.7
group = 'com.github.tomakehurst'
version = 0.3

repositories {
	mavenCentral()
}

dependencies {
    compile 'com.google.guava:guava:16.0'
    compile 'com.codahale.metrics:metrics-core:3.0.1'
    compile 'com.ning:async-http-client:1.8.2'
    compile 'org.hamcrest:hamcrest-core:1.3', 'org.hamcrest:hamcrest-library:1.3'
    compile 'com.fasterxml.jackson.core:jackson-core:2.3.0', 'com.fasterxml.jackson.core:jackson-annotations:2.3.0',
        'com.fasterxml.jackson.core:jackson-databind:2.3.0'

	testCompile "junit:junit:4.11"
	testCompile "org.skyscreamer:jsonassert:1.2.1"
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

test {
    exclude '**/ExampleScenarios*'
}

task sourcesJar(type: Jar, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}

artifacts {
     archives sourcesJar
     archives javadocJar
}

signing {
    sign configurations.archives
}

if (!this.hasProperty('sonatypeUser')) sonatypeUser = 'default';
if (!this.hasProperty('sonatypePassword')) sonatypePassword = 'default';

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
            	authentication(userName: sonatypeUser , password: sonatypePassword)
        	};
        	beforeDeployment { deployment -> signPom(deployment) };
            pom.artifactId = 'crash-lab'
            pom.project {
            	packaging 'jar'
            	name 'CrashLab'
            	description 'A Java resilience testing library'

            	url 'https://github.com/tomakehurst/crash-lab'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                scm {
					connection 'https://tomakehurst@github.com/tomakehurst/crash-lab.git'
					developerConnection 'https://tomakehurst@github.com/tomakehurst/crash-lab.git'
					url 'https://tomakehurst@github.com/tomakehurst/crash-lab.git'
				}

				developers {
					developer {
						id 'tomakehurst'
						name 'Tom Akehurst'
					}
				}
            }

            pom.whenConfigured { thepom ->
            	println thepom.dependencies.findAll({ it.artifactId.equals('junit') || it.scope.equals('test') });
            	thepom.dependencies.removeAll(thepom.dependencies.findAll({ it.artifactId.equals('junit') || it.scope.equals('test') }));
			}
        }
    }
}

task addGitTag << {
    println "git tag v${version}".execute().text
    println "git push origin --tags".execute().text
}

task release {
	dependsOn clean, build, uploadArchives, addGitTag
}

task 'bump-version' << {
    def filesWithVersion = [
        'build.gradle': { "version = 0.${it}" },
    ]

    def gradleBuildFile = new File('build.gradle')
    int currentMinorVersion
    gradleBuildFile.text.find ~/version = 0.([0-9]+)/, { match, minorVersion ->
        currentMinorVersion = Integer.valueOf(minorVersion)
        int nextMinorVersion = currentMinorVersion + 1

        filesWithVersion.each { fileName, lineWithVersionTemplates ->
            def file = new File(fileName)
            def lineWithVersionTemplateList = lineWithVersionTemplates instanceof List ?
                lineWithVersionTemplates :
                [lineWithVersionTemplates];

            lineWithVersionTemplateList.each { lineWithVersionTemplate ->
                def oldLine = lineWithVersionTemplate.call(currentMinorVersion)
                def newLine = lineWithVersionTemplate.call(nextMinorVersion)
                println "Replacing '${oldLine}' with '${newLine}' in ${fileName}"
                file.text = file.text.replace(oldLine, newLine);
            }
        }
    }
}

task 'add-copyright-headers' << {
	def copyrightNotice = """/*
 * Copyright (C) 2011 Thomas Akehurst
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"""

	def srcDir = new File('src')
	srcDir.eachFileRecurse { file ->
		if (file.name.endsWith(".java") && !file.text.contains(copyrightNotice)) {
			println "Adding copyright header to $file.path"
			def newFileText = copyrightNotice + file.text;
 			file.text = newFileText;
		}
	}
}
